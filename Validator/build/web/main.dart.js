// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const binding = flutter_sdk.src__widgets__binding;
  const form = flutter_sdk.src__widgets__form;
  const scaffold = flutter_sdk.src__material__scaffold;
  const basic = flutter_sdk.src__widgets__basic;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const flex = flutter_sdk.src__rendering__flex;
  const text = flutter_sdk.src__widgets__text;
  const text_style = flutter_sdk.src__painting__text_style;
  const text_form_field = flutter_sdk.src__material__text_form_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const container = flutter_sdk.src__widgets__container;
  const media_query = flutter_sdk.src__widgets__media_query;
  const outlined_button = flutter_sdk.src__material__outlined_button;
  const text_button = flutter_sdk.src__material__text_button;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const single_child_scroll_view = flutter_sdk.src__widgets__single_child_scroll_view;
  const icon = flutter_sdk.src__widgets__icon;
  const icons = flutter_sdk.src__material__icons;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var login_screen = Object.create(dart.library);
  var Register_screen = Object.create(dart.library);
  var $toString = dartx.toString;
  var $isEmpty = dartx.isEmpty;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    GlobalKeyOfFormState: () => (T.GlobalKeyOfFormState = dart.constFn(framework.GlobalKey$(form.FormState)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringNToStringN: () => (T.StringNToStringN = dart.constFn(dart.fnType(T.StringN(), [T.StringN()])))(),
    BuildContextToRegisterScreen: () => (T.BuildContextToRegisterScreen = dart.constFn(dart.fnType(Register_screen.RegisterScreen, [framework.BuildContext])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    BuildContextToLoginscreen: () => (T.BuildContextToLoginscreen = dart.constFn(dart.fnType(login_screen.Loginscreen, [framework.BuildContext])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 15,
        [EdgeInsets_right]: 15,
        [EdgeInsets_top]: 15,
        [EdgeInsets_left]: 15
      });
    }
  }, false);
  var C = Array(2).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:flutter_app/views/screens/auth/login_screen.dart",
    "package:flutter_app/views/screens/auth/Register_screen.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({debugShowCheckedModeBanner: false, title: "Flutter Demo", theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.cyan}), home: new login_screen.Loginscreen.new()});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.main = function main$0() {
    return binding.runApp(new main.MyApp.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  var _formkey = dart.privateName(login_screen, "_formkey");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  login_screen.Loginscreen = class Loginscreen extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Padding.new({padding: C[1] || CT.C1, child: new form.Form.new({key: this[_formkey], child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new text.Text.new("Welcome to Oxlade Playground", {style: new text_style.TextStyle.new({fontSize: 20, letterSpacing: 3, fontWeight: ui.FontWeight.bold})}), new basic.SizedBox.new({height: 20}), new text_form_field.TextFormField.new({validator: dart.fn(value => {
                    if (dart.nullCheck(value)[$isEmpty]) {
                      return "Please email should be entered";
                    } else {
                      return null;
                    }
                  }, T.StringNToStringN()), decoration: new input_decorator.InputDecoration.new({labelText: "Email"})}), new basic.SizedBox.new({height: 20}), new text_form_field.TextFormField.new({validator: dart.fn(value => {
                    if (dart.nullCheck(value)[$isEmpty]) {
                      return "The password cannot be empty";
                    } else {
                      return null;
                    }
                  }, T.StringNToStringN()), decoration: new input_decorator.InputDecoration.new({labelText: "Password"})}), new basic.SizedBox.new({height: 20}), new container.Container.new({width: media_query.MediaQuery.of(context).size.width - 200, child: new outlined_button.OutlinedButton.new({onPressed: dart.fn(() => {
                      if (dart.nullCheck(this[_formkey].currentState).validate()) {
                        core.print("Success");
                      } else {
                        core.print("Bad");
                      }
                      ;
                    }, T.VoidTovoid()), child: new text.Text.new("LOGIN")})}), new text_button.TextButton.new({onPressed: dart.fn(() => {
                  }, T.VoidTovoid()), child: new text.Text.new("continue as guest", {style: new text_style.TextStyle.new({color: colors.Colors.cyan, fontSize: 14, letterSpacing: 5, fontWeight: ui.FontWeight.bold})})}), new text_button.TextButton.new({onPressed: dart.fn(() => {
                    navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new Register_screen.RegisterScreen.new(), T.BuildContextToRegisterScreen())}));
                  }, T.VoidTovoid()), child: new text.Text.new("I don't have an account yet", {style: new text_style.TextStyle.new({fontSize: 12})})})])})})})});
    }
    static ['_#new#tearOff']() {
      return new login_screen.Loginscreen.new();
    }
  };
  (login_screen.Loginscreen.new = function() {
    this[_formkey] = T.GlobalKeyOfFormState().new();
    login_screen.Loginscreen.__proto__.new.call(this);
    ;
  }).prototype = login_screen.Loginscreen.prototype;
  dart.addTypeTests(login_screen.Loginscreen);
  dart.addTypeCaches(login_screen.Loginscreen);
  dart.setMethodSignature(login_screen.Loginscreen, () => ({
    __proto__: dart.getMethods(login_screen.Loginscreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(login_screen.Loginscreen, I[1]);
  dart.setFieldSignature(login_screen.Loginscreen, () => ({
    __proto__: dart.getFields(login_screen.Loginscreen.__proto__),
    [_formkey]: dart.finalFieldType(framework.GlobalKey$(form.FormState))
  }));
  var _formkey$ = dart.privateName(Register_screen, "_formkey");
  Register_screen.RegisterScreen = class RegisterScreen extends framework.StatelessWidget {
    build(context) {
      return new scaffold.Scaffold.new({body: new single_child_scroll_view.SingleChildScrollView.new({child: new basic.Padding.new({padding: C[1] || CT.C1, child: new form.Form.new({key: this[_formkey$], child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, children: T.JSArrayOfWidget().of([new text.Text.new("Register to the Zone", {style: new text_style.TextStyle.new({fontSize: 20, fontWeight: ui.FontWeight.bold, letterSpacing: 3})}), new basic.SizedBox.new({height: 25}), new basic.Row.new({children: T.JSArrayOfWidget().of([new basic.Flexible.new({child: new text_form_field.TextFormField.new({validator: dart.fn(value => {
                            if (dart.nullCheck(value)[$isEmpty]) {
                              return "Please first name must not be empty";
                            } else {
                              return null;
                            }
                          }, T.StringNToStringN()), decoration: new input_decorator.InputDecoration.new({labelText: "Firstname", prefixIcon: new icon.Icon.new(icons.Icons.toggle_on)})})}), new basic.SizedBox.new({width: 10}), new basic.Flexible.new({child: new text_form_field.TextFormField.new({validator: dart.fn(value => {
                            if (dart.nullCheck(value)[$isEmpty]) {
                              return "Please first name must not be empty";
                            } else {
                              return null;
                            }
                          }, T.StringNToStringN()), decoration: new input_decorator.InputDecoration.new({labelText: "Lastname", prefixIcon: new icon.Icon.new(icons.Icons.person)})})})])}), new basic.SizedBox.new({height: 20}), new text_form_field.TextFormField.new({validator: dart.fn(value => {
                      if (dart.nullCheck(value)[$isEmpty]) {
                        return "Please first name must not be empty";
                      } else {
                        return null;
                      }
                    }, T.StringNToStringN()), decoration: new input_decorator.InputDecoration.new({labelText: "Email Address", prefixIcon: new icon.Icon.new(icons.Icons.mail)})}), new basic.SizedBox.new({height: 20}), new text_form_field.TextFormField.new({validator: dart.fn(value => {
                      if (dart.nullCheck(value)[$isEmpty]) {
                        return "Please first name must not be empty";
                      } else {
                        return null;
                      }
                    }, T.StringNToStringN()), decoration: new input_decorator.InputDecoration.new({labelText: "Password", prefixIcon: new icon.Icon.new(icons.Icons.lock)})}), new basic.SizedBox.new({height: 25}), new container.Container.new({width: media_query.MediaQuery.of(context).size.width - 200, child: new outlined_button.OutlinedButton.new({onPressed: dart.fn(() => {
                        if (dart.nullCheck(this[_formkey$].currentState).validate()) {
                          core.print("Success");
                        } else {
                          core.print("Bad");
                        }
                      }, T.VoidTovoid()), child: new text.Text.new("REGISTER", {style: new text_style.TextStyle.new({color: colors.Colors.cyan.shade400})})})}), new text_button.TextButton.new({onPressed: dart.fn(() => {
                    }, T.VoidTovoid()), child: new text.Text.new("continue as a guest", {style: new text_style.TextStyle.new({fontSize: 18, letterSpacing: 5})})}), new text_button.TextButton.new({onPressed: dart.fn(() => {
                      navigator.Navigator.push(dart.dynamic, context, new page.MaterialPageRoute.new({builder: dart.fn(context => new login_screen.Loginscreen.new(), T.BuildContextToLoginscreen())}));
                    }, T.VoidTovoid()), child: new text.Text.new("Have an account")})])})})})})});
    }
    static ['_#new#tearOff']() {
      return new Register_screen.RegisterScreen.new();
    }
  };
  (Register_screen.RegisterScreen.new = function() {
    this[_formkey$] = T.GlobalKeyOfFormState().new();
    Register_screen.RegisterScreen.__proto__.new.call(this);
    ;
  }).prototype = Register_screen.RegisterScreen.prototype;
  dart.addTypeTests(Register_screen.RegisterScreen);
  dart.addTypeCaches(Register_screen.RegisterScreen);
  dart.setMethodSignature(Register_screen.RegisterScreen, () => ({
    __proto__: dart.getMethods(Register_screen.RegisterScreen.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(Register_screen.RegisterScreen, I[2]);
  dart.setFieldSignature(Register_screen.RegisterScreen, () => ({
    __proto__: dart.getFields(Register_screen.RegisterScreen.__proto__),
    [_formkey$]: dart.finalFieldType(framework.GlobalKey$(form.FormState))
  }));
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:flutter_app/views/screens/auth/login_screen.dart": login_screen,
    "package:flutter_app/views/screens/auth/Register_screen.dart": Register_screen
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/views/screens/auth/login_screen.dart","/zapp/project/lib/views/screens/auth/Register_screen.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    views__screens__auth__login_screen: login_screen,
    views__screens__auth__Register_screen: Register_screen
  };
}));

//# sourceMappingURL=main.js.map
